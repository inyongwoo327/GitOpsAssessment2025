name: K3s HA Cluster CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to take (apply, destroy)'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'eu-west-1'

jobs:
  security-scan:
    name: 'Security Scanning'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: terraform
          soft_fail: true
      
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform
          framework: terraform
          soft_fail: true
          output_format: github_failed_only
      
      - name: Check Terraform Formatting
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform fmt check
        run: |
          cd terraform
          terraform fmt -check -recursive
        continue-on-error: true

  dependency-scan:
    name: 'Dependency & Secret Scanning'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Run Trivy Filesystem Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './terraform'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
      
      - name: ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './scripts'
          severity: 'error'
          ignore_paths: 'bootstrap'
      
      - name: Scan for Secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  terraform-validate:
    name: 'Terraform Validation'
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-scan]
    defaults:
      run:
        working-directory: terraform
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        run: terraform init -backend=false
      
      - name: Terraform Validate
        run: terraform validate
      
      - name: Terraform Format Check
        run: terraform fmt -check
        continue-on-error: true

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: terraform
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var="local_ip=$(curl -s https://api.ipify.org)/32" \
            -var="ssh_private_key_path=~/.ssh/test.pem" \
            -out=tfplan
        continue-on-error: true
      
      - name: Comment PR with Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `#### Terraform Plan 📖
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    defaults:
      run:
        working-directory: terraform
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/test.pem
          chmod 600 ~/.ssh/test.pem
          ssh-keygen -y -f ~/.ssh/test.pem > ~/.ssh/test.pub
      
      - name: Verify SSH Key
        run: |
          ssh-keygen -l -f ~/.ssh/test.pem || {
            echo "Invalid SSH key"
            exit 1
          }
      
      - name: Import SSH Key to AWS
        run: |
          KEY_EXISTS=$(aws ec2 describe-key-pairs --key-names test --query 'KeyPairs[*].KeyName' --output text 2>/dev/null || echo "")
          
          if [ -z "$KEY_EXISTS" ]; then
            aws ec2 import-key-pair --key-name test --public-key-material fileb://~/.ssh/test.pub
            echo "✓ SSH key imported to AWS"
          else
            echo "✓ SSH key already exists in AWS"
          fi
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Apply
        id: apply
        run: |
          terraform apply \
            -var="local_ip=$(curl -s https://api.ipify.org)/32" \
            -var="ssh_private_key_path=~/.ssh/test.pem" \
            -auto-approve
      
      - name: Save Outputs
        if: success()
        run: |
          terraform output -json > outputs.json
          echo "MASTER_PRIMARY_IP=$(terraform output -raw master_primary_public_ip)" >> $GITHUB_ENV
          echo "GRAFANA_URL=$(terraform output -raw grafana_url)" >> $GITHUB_ENV
          echo "PROMETHEUS_URL=$(terraform output -raw prometheus_url)" >> $GITHUB_ENV
          echo "WORDPRESS_URL=$(terraform output -raw wordpress_url)" >> $GITHUB_ENV
      
      - name: Upload Outputs
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: terraform/outputs.json
          retention-days: 7
      
      - name: Deployment Summary
        if: success()
        run: |
          echo "## 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Access Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Grafana**: ${{ env.GRAFANA_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Prometheus**: ${{ env.PROMETHEUS_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **WordPress**: ${{ env.WORDPRESS_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### SSH Access" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "ssh -i ~/.ssh/test.pem ubuntu@${{ env.MASTER_PRIMARY_IP }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  cluster-health-check:
    name: 'Cluster Health Check'
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: success()
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Get Cluster Info
        working-directory: terraform
        run: |
          terraform init
          echo "MASTER_IP=$(terraform output -raw master_primary_public_ip)" >> $GITHUB_ENV
      
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/test.pem
          chmod 600 ~/.ssh/test.pem
      
      - name: Wait for Cluster Ready
        run: |
          echo "Waiting for cluster to be ready..."
          for i in {1..20}; do
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 \
               -i ~/.ssh/test.pem ubuntu@${{ env.MASTER_IP }} \
               'sudo kubectl get nodes' 2>/dev/null; then
              echo "✓ Cluster is ready!"
              break
            fi
            echo "Attempt $i: Cluster not ready, waiting 30s..."
            sleep 30
          done
      
      - name: Check Node Status
        run: |
          echo "## Cluster Health Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Nodes" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/test.pem \
            ubuntu@${{ env.MASTER_IP }} \
            'sudo kubectl get nodes -o wide' | tee -a $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
      
      - name: Check Monitoring Pods
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Monitoring Pods" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/test.pem \
            ubuntu@${{ env.MASTER_IP }} \
            'sudo kubectl get pods -n monitoring' | tee -a $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
      
      - name: Check WordPress Pods
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### WordPress Pods" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/test.pem \
            ubuntu@${{ env.MASTER_IP }} \
            'sudo kubectl get pods -n wordpress' | tee -a $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    defaults:
      run:
        working-directory: terraform
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/test.pem
          chmod 600 ~/.ssh/test.pem
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Destroy
        run: |
          terraform destroy \
            -var="local_ip=$(curl -s https://api.ipify.org)/32" \
            -var="ssh_private_key_path=~/.ssh/test.pem" \
            -auto-approve
      
      - name: Destruction Summary
        if: success()
        run: |
          echo "## 🗑️ Infrastructure Destroyed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All resources have been successfully removed." >> $GITHUB_STEP_SUMMARY